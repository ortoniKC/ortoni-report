<!DOCTYPE html>
<html lang="en" data-theme="{{preferredTheme}}">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Playwright HTML report by LetCode Koushik - V2.0.4">
    <title>{{title}}</title>
    <link rel="icon" href="https://raw.githubusercontent.com/ortoniKC/ortoni-report/refs/heads/main/favicon.png"
        type="image/x-icon">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
        integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<style>
    {{{inlineCss}}}
</style>

<body>
    {{> navbar }}
    <section class="section">
        <main class="container">
            <div class="columns">
                <aside class="column is-two-fifths">
                    {{> testPanel}}
                    {{> project}}
                </aside>
                <section class="column is-three-fifths">
                    {{!-- Overall summary --}}
                    <div id="summary">
                        <div class="columns is-multiline has-text-centered">
                            {{> summaryCard bg="primary" status="all" statusHeader="All Tests" statusCount=totalCount}}
                            {{> summaryCard bg="success" status="passed" statusHeader="Passed" statusCount=passCount}}
                            {{> summaryCard bg="danger" status="failed" statusHeader="Failed" statusCount=failCount}}
                            {{> summaryCard bg="info" status="skipped" statusHeader="Skipped" statusCount=skipCount}}
                            {{> summaryCard bg="warning" status="flaky" statusHeader="Flaky" statusCount=flakyCount}}
                            {{> summaryCard bg="retry" status="retry" statusHeader="Retry" statusCount=retryCount}}
                        </div>
                        <div class="box">
                            {{> userInfo}}
                        </div>
                    </div>
                    {{!-- Test details --}}
                    <div id="testDetails" style="display: none;">
                        <!-- Back button should be outside the dynamic content -->
                        <button class="button content" id="back-to-summary" onclick="showSummary()">Back to
                            Summary</button>
                        <!-- Test Details will be displayed here -->
                    </div>
                </section>
            </div>
        </main>
    </section>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            let testData = {{{ json results }}};
            const testDetails = document.getElementById('testDetails');
            const summary = document.getElementById('summary');
            const backButton = document.querySelector('button#back-to-summary');

            const themeButton = document.getElementById("toggle-theme");
            const preferredTheme = themeButton.getAttribute("data-theme-status");
            const themeIcon = document.getElementById("theme-icon");
            const htmlElement = document.documentElement;

            if (preferredTheme === 'dark') {
                htmlElement.setAttribute('data-theme', 'dark');
                themeIcon.classList = '';
                themeIcon.classList.add("fa", "fa-moon");
            } else if (preferredTheme === 'light') {
                htmlElement.setAttribute('data-theme', 'light');
                themeIcon.classList = '';
                themeIcon.classList.add("fa", "fa-sun");
            } else {
                if (window.matchMedia('(prefers-color-scheme: light)').matches) {
                    themeIcon.classList.add("fa", "fa-sun");
                }
                else {
                    themeIcon.classList.add("fa", "fa-moon");
                }
            }
            themeButton.addEventListener('click', () => {
                const currentTheme = htmlElement.getAttribute('data-theme');
                const newTheme = currentTheme === 'light' ? 'dark' : 'light';
                htmlElement.setAttribute('data-theme', newTheme);
                if (newTheme === 'dark') {
                    themeIcon.classList = '';
                    themeIcon.classList.add("fa", "fa-moon");
                } else {
                    themeIcon.classList = '';
                    themeIcon.classList.add("fa", "fa-sun");
                }
            });

            function showSummary() {
                summary.style.display = 'block';
                testDetails.style.display = 'none';
                backButton.style.display = 'none';
            }
            window.showSummary = showSummary;

            function displayTestDetails(test) {
                const summary = document.getElementById('summary');
                const testDetails = document.getElementById('testDetails');
                const backButton = document.querySelector('button#back-to-summary');
                summary.style.display = 'none';
                testDetails.style.opacity = '0';
                testDetails.style.display = 'block';
                setTimeout(() => {
                    testDetails.style.opacity = '1';
                    backButton.style.opacity = '1';
                }, 50);
                let currentScreenshotIndex = 0;
                function changeScreenshot(direction) {
                    const screenshots = test.screenshots;
                    currentScreenshotIndex = (currentScreenshotIndex + direction + screenshots.length) % screenshots.length;
                    updateScreenshot();
                }

                function gotoScreenshot(index) {
                    currentScreenshotIndex = index;
                    updateScreenshot();
                }

                function updateScreenshot() {
                    const screenshots = test.screenshots;
                    document.getElementById('screenshot-main-img').src = screenshots[currentScreenshotIndex];
                    document.getElementById('screenshot-modal-img').src = screenshots[currentScreenshotIndex];

                    document.querySelectorAll('.pagination-link').forEach((link, index) => {
                        if (index === currentScreenshotIndex) {
                            link.classList.add('is-current');
                        } else {
                            link.classList.remove('is-current');
                        }
                    });
                }
                let statusClass = '';
                let statusText = test.status.toUpperCase();
                if (test.status.startsWith('passed')) {
                    statusClass = 'success';
                } else if (test.status === 'flaky') {
                    statusClass = 'warning';
                } else if (test.status === 'failed') {
                    statusClass = 'danger';
                } else {
                    statusClass = 'info';
                }
                testDetails.innerHTML = `
                    <div class="sticky-header">
                        <div class="card mb-3">
                         <button class="button is-info is-light mb-3" id="back-to-summary" onclick="showSummary()">
                            <span class="icon"><i class="fa fa-chevron-left" style="color: #63E6BE;"></i></span>
                            <span>Back to Summary</span>
                        </button>
                        <div class="card-content">
                            <div class="content has-text-centered">
                            <h1 class="title is-2">${test.title}</h1>
                            <p class="subtitle is-5" id="filepath">${test.location}</p>
                            </div>
                        </div>
                        <footer class="card-footer">
                            <div class="card-footer-item">
                            <div class="columns is-mobile">
                                <div class="column is-half">
                                <div class="is-flex is-align-items-center">
                                    <span class="icon status-icon has-text-${statusClass}">
                                    <i class="fa fa-${test.status === 'passed' ? 'check-circle' : 'times-circle'}"></i>
                                    </span>
                                    <span class="has-text-weight-bold is-uppercase has-text-${statusClass}">${test.status}</span>
                                </div>
                                </div>
                            </div>
                            </div>
                            ${test.duration ? `
                            <div class="card-footer-item">
                            <div class="column is-half">
                                <div class="is-flex is-align-items-center">
                                <span class="icon status-icon has-text-info">
                                    <i class="fa fa-clock"></i>
                                </span>
                                <span class="has-text-info has-text-weight-semibold">${test.duration}</span>
                                </div>
                            </div>
                            </div>
                            ` : ''}
                            ${test.projectName ? `
                            <div class="card-footer-item">
                            <div class="is-flex is-align-items-center">
                                <span class="icon status-icon has-text-info">
                                <i class="fa fa-window-maximize" style="color: #B197FC;"></i>
                                </span>
                                <span class="" style="color: #B197FC;"> ${test.projectName}</span>
                            </div>
                            </div>
                            ` : ''}
                        </footer>
                        </div>
                    </div>

                    <div class="content-wrapper">
                        ${test.status != "skipped" ?
                        `<div class="card mb-5">
                        <div class="card-content">
                            <div class="columns is-multiline">
                            ${test.screenshots && test.screenshots.length > 0 ? `
                            <div class="column is-half">
                                <div id="testImage" class="modal">
                                <div class="modal-background"></div>
                                <div class="modal-content">
                                    <p class="image">
                                        <img id="screenshot-modal-img" src="${test.screenshots[0]}" alt="Screenshot">
                                    </p>
                                </div>
                                <button onclick="closeModal()" class="modal-close is-large" aria-label="close"></button>
                            </div>

                            <figure class="image">
                                <img id="screenshot-main-img" onclick="openModal()" src="${test.screenshots[0]}" alt="Screenshot">
                            </figure>
                            <nav class="mt-4 pagination is-small is-centered ${test.screenshots.length > 1 ? '' : 'is-hidden'}" role="navigation" aria-label="pagination">
                                <a class="pagination-previous" >Previous</a>
                                <a class="pagination-next" >Next</a>
                                <ul class="pagination-list">
                                    ${test.screenshots.map((_, index) => `
                                        <li>
                                            <a class="pagination-link ${index === 0 ? 'is-current' : ''}" aria-label="Goto screenshot ${index + 1}" >${index + 1}</a>
                                        </li>`).join('')}
                                </ul>
                            </nav>
                            </div>
                            ` : ''}
                            ${test.videoPath ? `
                            <div class="column is-half">
                                <div class="video-preview" onclick="openVideo()">
                                <video controls width="100%" height="auto" preload="metadata">
                                    <source src="${test.videoPath}" type="video/webm">
                                    Your browser does not support the video tag.
                                </video>
                                </div>
                            </div>
                            ` : ''}
                            </div>
                            ${test.tracePath ? `
                            <a href="trace/index.html?trace=http://localhost:${test.port}/${test.tracePath}" target="_blank" class="button is-link is-fullwidth mt-3">
                            <span class="icon"><i class="fa fa-file-text-o"></i></span>
                            <span>View Trace</span>
                            </a>
                            ` : ''}
                        </div>
                        </div>` : ''}
                        ${test.annotations && test.annotations.length ? `
                        <div class="card mb-5">
                        <header class="card-header">
                            <p class="card-header-title">Additional Information</p>
                        </header>
                        <div class="card-content">
                            <div class="content">
                            ${test.annotations
                                .filter(annotation => annotation !== null && annotation !== undefined)
                                .map(annotation => `
                                <div class="mb-4">
                                    ${annotation?.type ? `<strong class="has-text-link">Type: </strong><span>${annotation.type}</span>` : ''}
                                    <br>
                                    ${annotation?.description ? `<strong class="has-text-link">Description: </strong><span>${annotation.description}</span>` : ''}
                                </div>
                                `).join('')}
                            </div>
                        </div>
                        </div>
                        ` : ''}
                        ${test.steps.length > 0 ? `
                        <div class="card">
                        <header class="card-header">
                            <p class="card-header-title">Steps</p>
                        </header>
                        <div class="card-content">
                            <div class="content">
                             <span id="stepDetails" class="content"></span>
                            </div>
                        </div>
                        </div>
                        ` : ''}
                        ${test.errors.length ? `
                        <div class="card mt-5">
                        <header class="card-header">
                            <p class="card-header-title">Errors</p>
                        </header>
                        <div class="card-content">
                            <div class="content">
                            <pre><code class="data-lang=js">${test.errors.join('\n')}</code></pre>
                            </div>
                        </div>
                        </div>
                        ` : ''}
                        ${test.logs ? `
                        <div class="card mt-5">
                        <header class="card-header">
                            <p class="card-header-title">Logs</p>
                        </header>
                        <div class="card-content">
                            <div class="content">
                            <pre>${test.logs}</pre>
                            </div>
                        </div>
                        </div>
                        ` : ''}
                        ${test.videoPath ? `
                        <div id="testVideo" class="modal">
                            <div class="modal-background"></div>
                            <div class="modal-content">
                            <div class="box">
                                <video controls style="width: 100%;" autoplay>
                                <source src="${test.videoPath}" type="video/webm">
                                Your browser does not support the video tag.
                                </video>
                            </div>
                            </div>
                            <button class="modal-close is-large" aria-label="close" onclick="closeVideo()"></button>
                        </div>
                        ` : ''}
                    </div>`
                if (test.screenshots.length > 0) {
                    document.querySelector('.pagination-previous').addEventListener('click', () => changeScreenshot(-1));
                    document.querySelector('.pagination-next').addEventListener('click', () => changeScreenshot(1));
                    document.querySelectorAll('.pagination-link').forEach((link, index) => {
                        link.addEventListener('click', () => gotoScreenshot(index));
                    });
                }              
                const stepDetailsDiv = document.getElementById('stepDetails');
                if (stepDetailsDiv) {
                    const stepsList = attachSteps(test);
                    const detail = document.getElementById("stepopen");
                    stepDetailsDiv.appendChild(stepsList);
                }
            }
            function attachSteps(test) {
                const stepsList = document.createElement("ul");
                stepsList.setAttribute("id", "steps");
                stepsList.innerHTML = '';
                test.steps.forEach(step => {
                    const li = document.createElement('li');
                    li.innerHTML = `<strong class="${step.snippet ? 'has-text-danger' : ''}">${step.title}</strong>`;
                    if (step.snippet) {
                        const pre = document.createElement('pre');
                        const code = document.createElement('code');
                        const locationText = step.location ? `\n\nat: ${step.location}` : '';
                        code.innerHTML = `${step.snippet}${locationText}`;
                        code.setAttribute('data-lang', 'js');
                        pre.appendChild(code);
                        li.appendChild(pre);
                    }
                    stepsList.appendChild(li);
                });
                return stepsList;
            }
            function openModal() {
                let modal = document.querySelector("#testImage");
                modal.classList.add("is-active");
            }
            function openVideo() {
                let modal = document.querySelector("#testVideo");
                modal.classList.add("is-active");
            }
            function closeVideo() {
                let modal = document.querySelector("#testVideo");
                modal.classList.remove("is-active");
            }
            function closeModal() {
                let modal = document.querySelector("#testImage");
                modal.classList.remove("is-active");
            }

            window.openModal = openModal;
            window.openVideo = openVideo;
            window.closeVideo = closeVideo;
            window.closeModal = closeModal;

            document.addEventListener('keydown', (event) => {
                if (event.key === "Escape") {
                    closeModal();
                }
            });

            function attachEventListeners() {
                const checkboxes = document.querySelectorAll('#select-filter input[type="checkbox"]');
                checkboxes.forEach(checkbox => {
                    checkbox.addEventListener('change', applyFilters);
                });
                const testItems = document.querySelectorAll('[data-test-id]');
                testItems.forEach(item => {
                    item.addEventListener('click', () => {
                        testItems.forEach(i => i.classList.remove('listselected'));
                        item.classList.add('listselected');
                        const testId = item.getAttribute('data-test-id');
                        const test = testData[testId];
                        displayTestDetails(test);
                    });
                });
                const filters = document.querySelectorAll('.filter');
                filters.forEach(filter => {
                    filter.addEventListener('click', () => {
                        const status = filter.getAttribute('data-status');
                        filters.forEach(f => {
                            if (f.getAttribute('data-status')) {
                                f.classList.remove('active');
                            }
                        });
                        filter.classList.add('active');
                        applyFilters();
                    });
                });
            }

            function applyFilters() {
                const selectedCheckboxes = document.querySelectorAll('#select-filter input[type="checkbox"]:checked');
                const activeFilter = document.querySelector('.filter.active');
                const selectedStatus = activeFilter ? activeFilter.getAttribute('data-status') : 'all';
                const selectedProjects = [];
                const selectedTags = [];
                selectedCheckboxes.forEach(checkbox => {
                    if (checkbox.getAttribute('data-filter-type') === 'project') {
                        selectedProjects.push(checkbox.value.trim());
                    } else {
                        selectedTags.push(checkbox.value.trim());
                    }
                });
                const detailsElements = document.querySelectorAll('.sidebar details');
                detailsElements.forEach(details => {
                    let shouldShowDetails = false;
                    const items = details.querySelectorAll('li[data-test-id]');
                    items.forEach(item => {
                        const testTags = item.getAttribute('data-test-tags').trim().split(' ').filter(Boolean);
                        const projectName = item.getAttribute('data-project-name').trim();
                        const testStatus = item.getAttribute('data-test-status').trim();
                        const matchesProject = selectedProjects.length === 0 || selectedProjects.includes(projectName);
                        const matchesTags = selectedTags.length === 0 || selectedTags.every(tag => testTags.includes(tag));
                        const matchesStatus = (selectedStatus === 'all' && testStatus !== 'skipped') ||
                            (selectedStatus !== 'all' && (
                                testStatus === selectedStatus ||
                                (selectedStatus === 'failed' && (testStatus === 'failed' || testStatus === 'timedOut')) ||
                                (selectedStatus === 'retry' && testStatus.includes('retry')) ||
                                (selectedStatus === 'flaky' && testStatus.includes('flaky'))
                            ));
                        if (matchesProject && matchesTags && matchesStatus) {
                            item.classList.remove('is-hidden');
                            shouldShowDetails = true;
                        } else {
                            item.classList.add('is-hidden');
                        }
                    });
                    details.open = shouldShowDetails;
                    details.classList.toggle('is-hidden', !shouldShowDetails);
                });
                updateSelectedFiltersDisplay(selectedProjects, selectedTags, selectedStatus);
            }

            function updateSelectedFiltersDisplay(projects, tags, status) {
                const filtersDisplay = document.getElementById('selected-filters');
                filtersDisplay.innerHTML = '';

                if (projects.length > 0) {
                    filtersDisplay.innerHTML += `<span> Projects: ${projects.join(', ')}</span>`;
                }
                if (tags.length > 0) {
                    filtersDisplay.innerHTML += `<span> Tags: ${tags.join(', ')}</span>`;
                }
                if (status !== 'all') {
                    filtersDisplay.innerHTML += `<span> Status: ${status}</span>`;
                }

                if (filtersDisplay.innerHTML === '') {
                    filtersDisplay.innerHTML = '<span>All Tests</span>';
                }
            }
            const searchInput = document.querySelector('input[name="search"]');
            const detailsElements = document.querySelectorAll('details');
            function filterTests(search) {
                const searchTerm = search.toLowerCase();
                const testItems = document.querySelectorAll('[data-test-id]');

                if (searchTerm) {
                    detailsElements.forEach(detail => {
                        detail.open = false; // Collapse all details initially
                    });

                    testItems.forEach(item => {
                        const testTitle = item.textContent.toLowerCase();
                        if (testTitle.includes(searchTerm)) {
                            item.style.display = 'block'; // Show matching test item

                            let parent = item.parentElement;
                            while (parent && parent.tagName !== 'ASIDE') {
                                if (parent.tagName === 'DETAILS') {
                                    parent.open = true;
                                }
                                parent = parent.parentElement;
                            }
                        } else {
                            item.style.display = 'none';
                        }
                    });
                } else {
                    testItems.forEach(item => {
                        item.style.display = 'block';
                    });
                    detailsElements.forEach(detail => {
                        detail.open = false;
                    });
                }
            }
            function debounce(func, wait) {
                let timeout;
                return function (...args) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), wait);
                };
            }

            const debouncedSearch = debounce((event) => {
                filterTests(event.target.value);
            }, 300);

            searchInput.addEventListener('input', debouncedSearch);

            attachEventListeners();
        });
    </script>
</body>

</html>