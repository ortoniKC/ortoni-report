<!DOCTYPE html>
<html lang="en" data-theme="{{preferredTheme}}">
{{> head}}
<style>
    {{{inlineCss}}}
    
</style>

<body>
    <div class="app-container">
      {{> sidebar}}
        <main class="main-content">
            <div id="dashboard-section" class="content-section">
                {{#if logo}}
                <img src="{{logo}}" alt="{{projectName}}" class="logoimage" />
                {{else}}
                <h1 class="title is-3">Dashboard</h1>
                {{/if}}
                <div class="columns is-multiline has-text-centered">
                    {{> summaryCard bg="hsl(var(--bulma-primary-h), var(--bulma-primary-s), var(--bulma-primary-l)) !important" status="all" statusHeader="All Tests" statusCount=totalCount}}
                    {{> summaryCard bg="hsl(var(--bulma-success-h), var(--bulma-success-s), var(--bulma-success-l)) !important" status="passed" statusHeader="Passed" statusCount=passCount}}
                    {{> summaryCard bg="hsl(var(--bulma-danger-h), var(--bulma-danger-s), var(--bulma-danger-l)) !important" status="failed" statusHeader="Failed" statusCount=failCount}}
                    {{> summaryCard bg="hsl(var(--bulma-info-h), var(--bulma-info-s), var(--bulma-info-l)) !important" status="skipped" statusHeader="Skipped" statusCount=skipCount}}
                    {{> summaryCard bg="hsl(var(--bulma-warning-h), var(--bulma-warning-s), var(--bulma-warning-l)) !important" status="flaky" statusHeader="Flaky" statusCount=flakyCount}}
                    {{> summaryCard bg="#69748c" status="retry" statusHeader="Retry" statusCount=retryCount}}
                </div>
                {{> userInfo}}
            </div>
            <div id="tests-section" class="content-section" style="display: none;">
                    <div class="test-list">
                    <div class="columns">
                        <div class="column column is-two-fifths">
                        <h1 class="title is-3">Tests</h1>
                        <div class="columns is-multiline has-text-centered">
                        {{> summaryCard icon="fa-solid fa-vial" filter="filter" bg="hsl(var(--bulma-primary-h), var(--bulma-primary-s), var(--bulma-primary-l)) !important" status="all" statusHeader="All Tests" statusCount=totalCount}}
                        {{> summaryCard icon="fa fa-check-circle" filter="filter" bg="hsl(var(--bulma-success-h), var(--bulma-success-s), var(--bulma-success-l)) !important" status="passed" statusHeader="Passed" statusCount=passCount}}
                        {{> summaryCard icon="fa fa-times-circle" filter="filter" bg="hsl(var(--bulma-danger-h), var(--bulma-danger-s), var(--bulma-danger-l)) !important" status="failed" statusHeader="Failed" statusCount=failCount}}
                        {{> summaryCard icon="fa fa-question-circle" filter="filter" bg="hsl(var(--bulma-info-h), var(--bulma-info-s), var(--bulma-info-l)) !important" status="skipped" statusHeader="Skipped" statusCount=skipCount}}
                        {{> summaryCard icon="fa fa-exclamation-triangle" filter="filter" bg="hsl(var(--bulma-warning-h), var(--bulma-warning-s), var(--bulma-warning-l)) !important" status="flaky" statusHeader="Flaky" statusCount=flakyCount}}
                        {{> summaryCard icon="fa-solid fa-repeat" filter="filter" bg="#69748c" status="retry" statusHeader="Retry" statusCount=retryCount}}
                    </div>
                        {{> testPanel}}
                        {{> project}}
                        </div>
                        <div class="column column is-three-fifths">
                            <div id="testDetails" style="display: none;"></div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            /**
             * ====================================
             * UTILITY FUNCTIONS
             * ====================================
             */
            const Utils = {
                /**
                 * Debounce function to limit how often a function can be called
                 * @param {Function} func - Function to debounce
                 * @param {number} wait - Wait time in milliseconds
                 * @returns {Function} Debounced function
                 */
                debounce(func, wait) {
                    let timeout;
                    return function (...args) {
                        clearTimeout(timeout);
                        timeout = setTimeout(() => func.apply(this, args), wait);
                    };
                },

                /**
                 * Get status class based on test status
                 * @param {string} status - Test status
                 * @returns {string} CSS class
                 */
                getStatusClass(status) {
                    if (status.startsWith('passed')) return 'success';
                    if (status === 'flaky') return 'warning';
                    if (status === 'failed') return 'danger';
                    return 'info';
                },

                /**
                 * Get status icon based on test status
                 * @param {string} status - Test status
                 * @returns {string} Icon class
                 */
                getStatusIcon(status) {
                    if (status.startsWith('passed')) return 'check-circle';
                    if (status === 'flaky') return 'exclamation-triangle';
                    if (status === 'failed') return 'times-circle';
                    return 'question-circle';
                },

                /**
                 * Get project icon based on browser
                 * @param {string} project - Project name
                 * @returns {string} Icon HTML
                 */
                getProjectIcon(project) {
                    if (project === 'webkit') return `<i class="fa-brands fa-safari"></i>`;
                    if (project === 'firefox') return `<i class="fa-brands fa-firefox"></i>`;
                    return `<i class="fa-brands fa-chrome"></i>`;
                },

                /**
                 * Get adjusted base URL for trace viewer
                 * @returns {string} Adjusted base URL
                 */
                getAdjustedBaseUrl() {
                    const origin = window.location.origin;
                    const pathname = window.location.pathname;
                    if (pathname.endsWith('.html')) {
                        const directoryPath = pathname.substring(0, pathname.lastIndexOf('/') + 1);
                        return `${origin}${directoryPath}`;
                    }
                    return origin;
                }
            };

            /**
             * ====================================
             * SIDEBAR MANAGER
             * ====================================
             */
            class SidebarManager {
                /**
                 * Initialize the sidebar manager
                 */
                constructor() {
                    this.sidebarLinks = document.querySelectorAll('.sidebar-menu-link');
                    this.sections = document.querySelectorAll('.content-section');
                    this.testDetailsSection = document.getElementById('testDetails');
                    this.sidebar = document.getElementById('sidebar');
                    this.mainContent = document.querySelector('.main-content');
                    this.init();
                }

                /**
                 * Initialize sidebar manager
                 */
                init() {
                    this.attachEventListeners();
                }

                /**
                 * Attach event listeners
                 */
                attachEventListeners() {
                    this.sidebarLinks.forEach(link => {
                        link.addEventListener('click', (e) => {
                            e.preventDefault();
                            this.setActiveLink(link);
                            this.showSection(link.getAttribute('data-section'));
                        });
                    });
                }

                /**
                 * Set active link
                 * @param {HTMLElement} activeLink - Active link
                 */
                setActiveLink(activeLink) {
                    this.sidebarLinks.forEach(link => {
                        link.classList.remove('active');
                    });
                    activeLink.classList.add('active');
                }

                /**
                 * Show section
                 * @param {string} sectionId - Section ID
                 */
                showSection(sectionId) {
                    // Hide test details if showing a main section
                    this.testDetailsSection.style.display = 'none';
                    
                    // Show the selected section
                    this.sections.forEach(section => {
                        section.style.display = 'none';
                    });
                    document.getElementById(`${sectionId}-section`).style.display = 'block';
                }

                /**
                 * Show test details
                 */
                showTestDetails() {
                    /*
                    this.sections.forEach(section => {
                        section.style.display = 'none';
                    });
                    */
                    this.testDetailsSection.style.display = 'block';
                }
            }

            /* Add this new class to the JavaScript section, after the SidebarManager class */
            /**
             * ====================================
             * SIDEBAR COLLAPSE MANAGER
             * ====================================
             */
            class SidebarCollapseManager {
                /**
                 * Initialize the sidebar collapse manager
                 */
                constructor() {
                    this.sidebar = document.getElementById('sidebar');
                    this.mainContent = document.querySelector('.main-content');
                    this.toggleButton = document.getElementById('sidebar-toggle');
                    this.toggleIcon = document.getElementById('sidebar-toggle-icon');
                    this.isInitialLoad = true;
                    this.init();
                }

                /**
                 * Initialize sidebar collapse manager
                 */
                init() {
                    // Only add the click event listener once
                    this.toggleButton.addEventListener('click', (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        this.toggleSidebar();
                    });
                    
                    // Check for saved state, but only apply it on initial load
                    if (this.isInitialLoad) {
                        const sidebarCollapsed = localStorage.getItem('sidebarCollapsed') === 'true';
                        if (sidebarCollapsed) {
                            this.collapseSidebar(false);
                        }
                        this.isInitialLoad = false;
                    }
                }

                /**
                 * Toggle sidebar collapsed state
                 */
                toggleSidebar() {
                    if (this.sidebar.classList.contains('collapsed')) {
                        this.expandSidebar(true);
                    } else {
                        this.collapseSidebar(true);
                    }
                }

                /**
                 * Collapse sidebar
                 * @param {boolean} saveState - Whether to save state to localStorage
                 */
                collapseSidebar(saveState = true) {
                    this.sidebar.classList.add('collapsed');
                    this.mainContent.classList.add('expanded');
                    this.toggleIcon.classList.remove('fa-chevron-left');
                    this.toggleIcon.classList.add('fa-chevron-right');
                    if (saveState) {
                        localStorage.setItem('sidebarCollapsed', 'true');
                    }
                }

                /**
                 * Expand sidebar
                 * @param {boolean} saveState - Whether to save state to localStorage
                 */
                expandSidebar(saveState = true) {
                    this.sidebar.classList.remove('collapsed');
                    this.mainContent.classList.remove('expanded');
                    this.toggleIcon.classList.remove('fa-chevron-right');
                    this.toggleIcon.classList.add('fa-chevron-left');
                    if (saveState) {
                        localStorage.setItem('sidebarCollapsed', 'false');
                    }
                }
            }

            /**
             * ====================================
             * THEME MANAGER
             * ====================================
             */
            class ThemeManager {
                /**
                 * Initialize the theme manager
                 * @param {Object} elements - DOM elements
                 */
                constructor(elements) {
                    this.elements = elements;
                    this.init();
                }

                /**
                 * Initialize theme manager
                 */
                init() {
                    const preferredTheme = this.elements.themeButton.getAttribute("data-theme-status");
                    this.setTheme(preferredTheme);
                    this.elements.themeButton.addEventListener('click', () => this.toggleTheme());
                }

                /**
                 * Set theme (light or dark)
                 * @param {string} theme - Theme name
                 */
                setTheme(theme) {
                    this.elements.htmlElement.setAttribute('data-theme', theme);
                    this.elements.themeIcon.className = `fa fa-${theme === 'dark' ? 'moon' : 'sun'}`;
                }

                /**
                 * Toggle between light and dark theme
                 */
                toggleTheme() {
                    const currentTheme = this.elements.htmlElement.getAttribute('data-theme');
                    this.setTheme(currentTheme === 'light' ? 'dark' : 'light');
                }
            }

            /**
             * ====================================
             * TEST DETAILS MANAGER
             * ====================================
             */
            class TestDetailsManager {
                /**
                 * Initialize the test details manager
                 * @param {Object} elements - DOM elements
                 * @param {Object} testData - Test data
                 * @param {Array} testHistory - Test history data
                 * @param {SidebarManager} sidebarManager - Sidebar manager
                 */
                constructor(elements, testData, testHistory, sidebarManager) {
                    this.elements = elements;
                    this.testData = testData;
                    this.testHistory = testHistory;
                    this.sidebarManager = sidebarManager;
                    this.testHistoriesMap = null;
                    this.testHistoryTitle = '';
                    this.currentScreenshotIndex = 0;
                }

                /**
                 * Show test details
                 * @param {Object} test - Test data
                 */
                show(test) {
                    this.sidebarManager.showTestDetails();
                    this.elements.testDetails.style.opacity = '0';
                    setTimeout(() => {
                        this.elements.testDetails.style.opacity = '1';
                    }, 50);
                    this.render(test);
                }

                /**
                 * Hide test details and show dashboard
                 */
                hide() {
                    // Find the dashboard link and click it
                    document.querySelector('.sidebar-menu-link[data-section="dashboard"]').click();
                }

                /**
                 * Render test details
                 * @param {Object} test - Test data
                 */
                render(test) {
                    this.currentScreenshotIndex = 0;
                    const statusClass = Utils.getStatusClass(test.status);
                    const statusIcon = Utils.getStatusIcon(test.status);
                    const projectIcon = Utils.getProjectIcon(test.projectName);

                    this.elements.testDetails.innerHTML = `
                        <div class="sticky-header">
                            <div class="card mb-3">
                                <div class="card-content">
                                    <div class="content has-text-centered">
                                        <h1 class="title is-4">${test.title}</h1>
                                        <p class="subtitle is-5" id="filepath">${test.location}</p>
                                    </div>
                                </div>
                                <footer class="card-footer">
                                    <div class="card-footer-item">
                                        <div class="columns is-mobile">
                                            <div class="column is-half">
                                                <div class="is-flex is-align-items-center">
                                                    <span class="icon status-icon has-text-${statusClass}">
                                                        <i class="fa fa-${statusIcon}"></i>
                                                    </span>
                                                    <span class="has-text-weight-bold is-capitalized has-text-${statusClass}">${test.status}</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    ${test.duration ? `
                                    <div class="card-footer-item">
                                        <div class="column is-half">
                                            <div class="is-flex is-align-items-center">
                                                <span class="icon status-icon has-text-info">
                                                    <i class="fa fa-clock"></i>
                                                </span>
                                                <span class="has-text-info has-text-weight-semibold">${test.duration}</span>
                                            </div>
                                        </div>
                                    </div>
                                    ` : ''}
                                    ${test.projectName ? `
                                    <div class="card-footer-item">
                                        <div class="is-flex is-align-items-center">
                                            <span class="icon status-icon has-text-link">
                                                ${projectIcon}
                                            </span>
                                            <span> ${test.projectName}</span>
                                        </div>
                                    </div>
                                    ` : ''}
                                </footer>
                            </div>
                        </div>
                        <div class="content-wrapper">
                            ${this.renderTestContent(test)}
                        </div>
                    `;
                    this.attachScreenshotListeners(test);
                    this.attachSteps(test);
                    this.attachTabListeners();
                }

                /**
                 * Render test content
                 * @param {Object} test - Test data
                 * @returns {string} HTML content
                 */
                renderTestContent(test) {
                    let content = '';
                    if (test.status !== "skipped") {
                        content += this.renderScreenshotsAndVideo(test);
                    }
                    content += this.renderAdditionalInfo(test);
                    content += this.renderTabs(test);
                    return content;
                }

                /**
                 * Render screenshots and video
                 * @param {Object} test - Test data
                 * @returns {string} HTML content
                 */
                renderScreenshotsAndVideo(test) {
                    let content = '<div class="card mb-5"><div class="card-content"><div class="columns is-multiline">';
                    if (test.screenshots && test.screenshots.length > 0) {
                        content += `
                            <div class="column is-half">
                                <div id="testImage" class="modal">
                                    <div class="modal-background"></div>
                                    <div class="modal-content">
                                        <p class="image">
                                            <img id="screenshot-modal-img" src="${test.screenshots[0]}" alt="Screenshot">
                                        </p>
                                    </div>
                                    <button onclick="closeModal()" class="modal-close is-large" aria-label="close"></button>
                                </div>
                                <figure class="image">
                                    <img id="screenshot-main-img" onclick="openModal()" src="${test.screenshots[0]}" alt="Screenshot">
                                </figure>
                                <nav class="mt-4 pagination is-small is-centered ${test.screenshots.length > 1 ? '' : 'is-hidden'}" role="navigation" aria-label="pagination">
                                    <a class="pagination-previous">Previous</a>
                                    <a class="pagination-next">Next</a>
                                    <ul class="pagination-list">
                                        ${test.screenshots.map((_, index) => `
                                            <li>
                                                <a class="pagination-link ${index === 0 ? 'is-current' : ''}" aria-label="Goto screenshot ${index + 1}">${index + 1}</a>
                                            </li>`).join('')}
                                    </ul>
                                </nav>
                            </div>
                        `;
                    }
                    if (test.videoPath) {
                        content += `
                            <div class="column is-half">
                                <div class="video-preview">
                                    <video controls width="100%" height="auto" preload="metadata">
                                        <source src="${test.videoPath}" type="video/webm">
                                        Your browser does not support the video tag.
                                    </video>
                                </div>
                            </div>
                        `;
                    }
                    content += '</div>';
                    content += `
                        <div class="columns">
                            <div class="column">
                                <button
                                    onclick="openHistory()"
                                    class="button is-primary is-fullwidth mt-3">
                                    <span class="icon"><i class="fa-solid fa-timeline"></i></span>
                                    <span class="has-text-white pl-2">Open history</span>
                                </button>
                                <div id="historyModal" class="modal">
                                    <div class="modal-background"></div>
                                </div>
                            </div>
                            ${test.tracePath ? `
                            <div class="column">
                                <button
                                    data-trace="${test.tracePath}"
                                    onclick="openTraceViewer(this)"
                                    class="button is-primary is-fullwidth mt-3">
                                    <span class="icon"><i class="fa-solid fa-tv"></i></span>
                                    <span class="has-text-white pl-2">View Trace</span>
                                </button>
                            </div>
                            ` : ''}
                        </div>
                    `;

                    content += '</div></div>';
                    return content;
                }

                /**
                 * Render additional information
                 * @param {Object} test - Test data
                 * @returns {string} HTML content
                 */
                renderAdditionalInfo(test) {
                    if (!(test.annotations.length || test.testTags.length > 0)) return '';
                    return `
                        <div class="card mb-5">
                            <header class="card-header">
                                <p class="card-header-title">Additional Information</p>
                            </header>
                            <div class="card-content">
                                <div class="content">
                                    ${test.testTags.length > 0 ? `
                                    <div class="control mb-4">
                                        <div class="tags is-rounded"> 
                                            ${test.testTags.map(tag => `<span class="tag is-primary is-medium">${tag}</span>`).join('')}
                                        </div>
                                    </div>` : ""}
                                    ${test.annotations
                                        .filter(annotation => annotation !== null && annotation !== undefined)
                                        .map(annotation => `
                                            <div class="mb-4">
                                                ${annotation?.type ? `<strong class="has-text-link">Type: </strong><span>${annotation.type}</span>` : ''}
                                                <br>
                                                ${annotation?.description ? `<strong class="has-text-link">Description: </strong><span>${annotation.description}</span>` : ''}
                                            </div>
                                            `).join('')}
                                </div>
                            </div>
                        </div>
                    `;
                }

                /**
                 * Render tabs
                 * @param {Object} test - Test data
                 * @returns {string} HTML content
                 */
                renderTabs(test) {
                    return `
                        <div class="card mt-5">
                            <div class="card-content">
                                <div class="tabs is-boxed is-fullwidth">
                                    <ul>
                                        <li class="is-active"><a data-tab="steps">Steps</a></li>
                                        <li><a data-tab="errors">Errors</a></li>
                                        <li><a data-tab="logs">Logs</a></li>
                                    </ul>
                                </div>
                                <div id="tabContent">
                                    <div id="stepsTab" class="tab-content">
                                        ${this.renderSteps(test)}
                                    </div>
                                    <div id="errorsTab" class="tab-content" style="display: none;">
                                        ${this.renderErrors(test)}
                                    </div>
                                    <div id="logsTab" class="tab-content" style="display: none;">
                                        ${this.renderLogs(test)}
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                }

                /**
                 * Render steps
                 * @param {Object} test - Test data
                 * @returns {string} HTML content
                 */
                renderSteps(test) {
                    if (test.steps.length === 0) return '<p>No steps available.</p>';
                    return `
                        <div class="content">
                            <span id="stepDetails" class="content"></span>
                        </div>
                    `;
                }

                /**
                 * Render errors
                 * @param {Object} test - Test data
                 * @returns {string} HTML content
                 */
                renderErrors(test) {
                    if (!test.errors.length) return '<p>No errors reported.</p>';
                    return `
                        <div class="content">
                            <pre><code class="data-lang=js">${test.errors.join('\n')}</code></pre>
                        </div>
                    `;
                }

                /**
                 * Render logs
                 * @param {Object} test - Test data
                 * @returns {string} HTML content
                 */
                renderLogs(test) {
                    if (!test.logs) return '<p>No logs available.</p>';
                    return `
                        <div class="content">
                            <pre>${test.logs}</pre>
                        </div>
                    `;
                }

                /**
                 * Attach screenshot listeners
                 * @param {Object} test - Test data
                 */
                attachScreenshotListeners(test) {
                    if (test.screenshots && test.screenshots.length > 0) {
                        const changeScreenshot = (direction) => {
                            this.currentScreenshotIndex = (this.currentScreenshotIndex + direction + test.screenshots.length) % test.screenshots.length;
                            this.updateScreenshot(test.screenshots, this.currentScreenshotIndex);
                        };
                        const gotoScreenshot = (index) => {
                            this.currentScreenshotIndex = index;
                            this.updateScreenshot(test.screenshots, this.currentScreenshotIndex);
                        };
                        document.querySelector('.pagination-previous').addEventListener('click', () => changeScreenshot(-1));
                        document.querySelector('.pagination-next').addEventListener('click', () => changeScreenshot(1));
                        document.querySelectorAll('.pagination-link').forEach((link, index) => {
                            link.addEventListener('click', () => gotoScreenshot(index));
                        });
                    }
                }

                /**
                 * Update screenshot
                 * @param {Array} screenshots - Screenshot paths
                 * @param {number} index - Screenshot index
                 */
                updateScreenshot(screenshots, index) {
                    document.getElementById('screenshot-main-img').src = screenshots[index];
                    document.getElementById('screenshot-modal-img').src = screenshots[index];
                    document.querySelectorAll('.pagination-link').forEach((link, i) => {
                        link.classList.toggle('is-current', i === index);
                    });
                }

                /**
                 * Attach steps
                 * @param {Object} test - Test data
                 */
                attachSteps(test) {
                    const stepDetailsDiv = document.getElementById('stepDetails');
                    if (stepDetailsDiv) {
                        const stepsList = document.createElement("ul");
                        stepsList.setAttribute("id", "steps");
                        test.steps.forEach(step => {
                            const li = document.createElement('li');
                            li.innerHTML = `<strong class="${step.snippet ? 'has-text-danger' : ''}">${step.title}</strong>`;
                            if (step.snippet) {
                                const pre = document.createElement('pre');
                                const code = document.createElement('code');
                                const locationText = step.location ? `\n\nat: ${step.location}` : '';
                                code.innerHTML = `${step.snippet}${locationText}`;
                                code.setAttribute('data-lang', 'js');
                                pre.appendChild(code);
                                li.appendChild(pre);
                            }
                            stepsList.appendChild(li);
                        });
                        stepDetailsDiv.appendChild(stepsList);
                    }
                }

                /**
                 * Attach tab listeners
                 */
                attachTabListeners() {
                    const tabLinks = document.querySelectorAll('div.tabs a');
                    tabLinks.forEach(link => {
                        link.addEventListener('click', (e) => {
                            e.preventDefault();
                            const tabId = link.getAttribute('data-tab');
                            
                            tabLinks.forEach(l => l.parentElement.classList.remove('is-active'));
                            document.querySelectorAll('div.tab-content').forEach(c => c.style.display = 'none');
                            
                            link.parentElement.classList.add('is-active');
                            document.getElementById(`${tabId}Tab`).style.display = 'block';
                        });
                    });
                }

                /**
                 * Attach event listeners
                 */
                attachEventListeners() {
                    const testItems = document.querySelectorAll('[data-test-id]');
                    testItems.forEach(item => {
                        item.addEventListener('click', () => {
                            testItems.forEach(i => i.classList.remove('listselected'));
                            item.classList.add('listselected');
                            const testId = item.getAttribute('data-test-id');
                            const testHistoryId = item.getAttribute('data-test-history-id');
                            const test = this.testData[testId];
                            const historyEntry = this.testHistory.find(entry => entry.testId === testHistoryId);
                            this.testHistoriesMap = historyEntry ? historyEntry.history : null;
                            this.testHistoryTitle = historyEntry && historyEntry.testId ? historyEntry.testId.split(":")[2] : '';
                            this.show(test);
                        });
                    });
                }
            }

            /**
             * ====================================
             * FILTER MANAGER
             * ====================================
             */
            class FilterManager {
                /**
                 * Initialize the filter manager
                 * @param {Object} elements - DOM elements
                 */
                constructor(elements) {
                    this.elements = elements;
                    this.init();
                }

                /**
                 * Initialize filter manager
                 */
                init() {
                    this.attachEventListeners();
                }

                /**
                 * Attach event listeners
                 */
                attachEventListeners() {
                    const checkboxes = document.querySelectorAll('#select-filter input[type="checkbox"]');
                    checkboxes.forEach(checkbox => {
                        checkbox.addEventListener('change', () => this.applyFilters());
                    });

                    const filters = document.querySelectorAll('.filter');
                    filters.forEach(filter => {
                        filter.addEventListener('click', (event) => {
                            filters.forEach(f => {
                            f.classList.remove('active');
                            f.style.borderRight = ''; // Reset previous border-right
                        });
                        const clickedFilter = event.currentTarget;
                        clickedFilter.classList.add('active');
                        const borderLeftColor = window.getComputedStyle(clickedFilter).borderLeftColor;
                        clickedFilter.style.setProperty('border-right', `5px solid ${borderLeftColor}`, 'important');
                        this.applyFilters();
                        });
                    });
                }

                /**
                 * Apply filters
                 */
                applyFilters() {
                    const selectedProjects = this.getSelectedValues('project');
                    const selectedTags = this.getSelectedValues('test-tags');
                    const selectedStatus = document.querySelector('.filter.active')?.getAttribute('data-status') || 'all';

                    this.elements.detailsElements.forEach(details => {
                        const items = details.querySelectorAll('div[data-test-id]');
                        let shouldShowDetails = false;

                        items.forEach(item => {
                            const isVisible = this.shouldShowItem(item, selectedProjects, selectedTags, selectedStatus);
                            item.classList.toggle('is-hidden', !isVisible);
                            shouldShowDetails = shouldShowDetails || isVisible;
                        });

                        details.open = shouldShowDetails;
                        details.classList.toggle('is-hidden', !shouldShowDetails);
                    });

                    this.updateSelectedFiltersDisplay(selectedProjects, selectedTags, selectedStatus);
                }

                /**
                 * Get selected values
                 * @param {string} type - Filter type
                 * @returns {Array} Selected values
                 */
                getSelectedValues(type) {
                    return Array.from(document.querySelectorAll(`#select-filter input[type="checkbox"][data-filter-type="${type}"]:checked`))
                        .map(checkbox => checkbox.value.trim());
                }

                /**
                 * Check if item should be shown
                 * @param {HTMLElement} item - Test item
                 * @param {Array} projects - Selected projects
                 * @param {Array} tags - Selected tags
                 * @param {string} status - Selected status
                 * @returns {boolean} Whether item should be shown
                 */
                shouldShowItem(item, projects, tags, status) {
                    const testTags = item.getAttribute('data-test-tags').trim().split(' ').filter(Boolean);
                    const projectName = item.getAttribute('data-project-name').trim();
                    const testStatus = item.getAttribute('data-test-status').trim();

                    const matchesProject = projects.length === 0 || projects.includes(projectName);
                    const matchesTags = tags.length === 0 || tags.every(tag => testTags.includes(tag));
                    const matchesStatus = this.matchesStatus(testStatus, status);

                    return matchesProject && matchesTags && matchesStatus;
                }

                /**
                 * Check if test status matches selected status
                 * @param {string} testStatus - Test status
                 * @param {string} selectedStatus - Selected status
                 * @returns {boolean} Whether status matches
                 */
                matchesStatus(testStatus, selectedStatus) {
                    if (selectedStatus === 'all') return testStatus !== 'skipped';
                    if (selectedStatus === 'failed') return testStatus === 'failed' || testStatus === 'timedOut';
                    if (selectedStatus === 'retry') return testStatus.includes('retry');
                    if (selectedStatus === 'flaky') return testStatus.includes('flaky');
                    return testStatus === selectedStatus;
                }

                /**
                 * Update selected filters display
                 * @param {Array} projects - Selected projects
                 * @param {Array} tags - Selected tags
                 * @param {string} status - Selected status
                 */
                updateSelectedFiltersDisplay(projects, tags, status) {
                    let displayText = [];
                    if (projects.length > 0) displayText.push(`Projects: ${projects.join(', ')}`);
                    if (tags.length > 0) displayText.push(`Tags: ${tags.join(', ')}`);
                    if (status !== 'all') displayText.push(`Status: ${status}`);
                    this.elements.filtersDisplay.innerHTML = displayText.length > 0 ? displayText.join(' | ') : 'All Tests';
                }
            }

            /**
             * ====================================
             * SEARCH MANAGER
             * ====================================
             */
            class SearchManager {
                /**
                 * Initialize the search manager
                 * @param {Object} elements - DOM elements
                 */
                constructor(elements) {
                    this.elements = elements;
                    this.init();
                }

                /**
                 * Initialize search manager
                 */
                init() {
                    this.elements.searchInput.addEventListener('input', Utils.debounce(this.filterTests.bind(this), 300));
                }

                /**
                 * Filter tests based on search term
                 * @param {Event} event - Input event
                 */
                filterTests(event) {
                    const searchTerm = event.target.value.toLowerCase();
                    const testItems = document.querySelectorAll('[data-test-id]');

                    this.elements.detailsElements.forEach(detail => detail.open = !!searchTerm);

                    testItems.forEach(item => {
                        const isVisible = item.textContent.toLowerCase().includes(searchTerm);
                        item.style.display = isVisible ? 'flex' : 'none';
                        if (isVisible && searchTerm) this.openParentDetails(item);
                    });
                }

                /**
                 * Open parent details elements
                 * @param {HTMLElement} item - Test item
                 */
                openParentDetails(item) {
                    let parent = item.parentElement;
                    while (parent && parent.tagName !== 'ASIDE') {
                        if (parent.tagName === 'DETAILS') parent.open = true;
                        parent = parent.parentElement;
                    }
                }
            }

            /**
 * ====================================
 * HISTORY MANAGER
 * ====================================
 */
            class HistoryManager {
                /**
                 * Initialize the history manager
                 * @param {Array} testHistory - Test history data
                 */
                constructor(testHistory) {
                    this.testHistory = testHistory
                    this.testHistoriesMap = null
                    this.testHistoryTitle = ""
                    this.activeErrorModal = null
                }

                /**
                 * Set current test history
                 * @param {Array} historyMap - History map
                 * @param {string} title - Test title
                 */
                setCurrentHistory(historyMap, title) {
                    this.testHistoriesMap = historyMap
                    this.testHistoryTitle = title
                }

                /**
                 * Open history modal
                 */
                openHistory() {
                    const historyElement = document.getElementById("historyModal")
                    historyElement.classList.add("is-active")

                    let historyContent = ""
                    if (this.testHistoriesMap && this.testHistoriesMap.length > 0) {
                        historyContent = this.testHistoriesMap
                            .map(
                                (h, index) => `
                <tr>
                    <td>${h.run_date}</td>
                    <td>
                        <span class="tag is-${this.getStatusClass(h.status)}">
                            ${h.status}
                        </span>
                    </td>
                    <td>${h.duration}</td>
                    <td>
                        ${h.error_message
                                        ? `<div class="modal" id="error-${index}">
                                <div class="modal-background"></div>
                                <div class="modal-card">
                                    <header class="modal-card-head">
                                        <p class="modal-card-title">
                                            <span class="icon-text">
                                                <span class="icon">
                                                    <i class="fa-solid fa-exclamation-triangle"></i>
                                                </span>
                                                <span>Error Details</span>
                                            </span>
                                        </p>
                                        <button class="delete" aria-label="close" onclick="closeErrorModal('error-${index}')"></button>
                                    </header>
                                    <section class="modal-card-body">
                                        <div class="notification is-danger is-light">
                                            <pre><code>${h.error_message}</code></pre>
                                        </div>
                                    </section>
                                    <footer class="modal-card-foot">
                                        <button class="button is-primary" onclick="closeErrorModal('error-${index}')">Close</button>
                                    </footer>
                                </div>
                            </div>
                            <button class="button is-small is-link" onclick="showHistoryErrorMessage('error-${index}')">
                                <span class="icon">
                                    <i class="fa-solid fa-exclamation-triangle"></i>
                                </span>
                                <span>View Error</span>
                            </button>`
                                        : '<span class="tag is-success is-light">No Error</span>'
                                    }
                    </td>
                </tr>
            `,
                            )
                            .join("")
                    } else {
                        historyContent = `
                <tr>
                    <td colspan="4">
                        <div class="notification is-info is-light">
                            <p class="has-text-centered">
                                <span class="icon">
                                    <i class="fa-solid fa-info-circle"></i>
                                </span>
                                <span>No history available for this test.</span>
                            </p>
                        </div>
                    </td>
                </tr>
            `
                    }

                    historyElement.innerHTML = `
            <div class="modal-background"></div>
            <div class="modal-card">
                <header class="modal-card-head">
                    <p class="modal-card-title">
                        <span class="icon-text">
                            <span class="icon">
                                <i class="fa-solid fa-history"></i>
                            </span>
                            <span>Test History: ${this.testHistoryTitle}</span>
                        </span>
                    </p>
                    <button class="delete" aria-label="close" onclick="closeHistoryModal()"></button>
                </header>
                <section class="modal-card-body">
                    <div class="table-container">
                        <table class="table is-hoverable is-fullwidth">
                            <thead>
                                <tr>
                                    <th title="Run Date">
                                        <span class="icon-text">
                                            <span class="icon">
                                                <i class="fa-solid fa-calendar"></i>
                                            </span>
                                            <span>Run Date</span>
                                        </span>
                                    </th>
                                    <th title="Status">
                                        <span class="icon-text">
                                            <span class="icon">
                                                <i class="fa-solid fa-check-circle"></i>
                                            </span>
                                            <span>Status</span>
                                        </span>
                                    </th>
                                    <th title="Duration">
                                        <span class="icon-text">
                                            <span class="icon">
                                                <i class="fa-solid fa-clock"></i>
                                            </span>
                                            <span>Duration</span>
                                        </span>
                                    </th>
                                    <th title="Details">
                                        <span class="icon-text">
                                            <span class="icon">
                                                <i class="fa-solid fa-info-circle"></i>
                                            </span>
                                            <span>Details</span>
                                        </span>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                ${historyContent}
                            </tbody>
                        </table>
                    </div>
                </section>
                <footer class="modal-card-foot">
                    <button class="button is-primary" onclick="closeHistoryModal()">Close</button>
                </footer>
            </div>
        `

                    // Add keyboard event listener for ESC key
                    document.addEventListener("keydown", this.handleEscKeyPress)
                }

                /**
                 * Get status class based on test status
                 * @param {string} status - Test status
                 * @returns {string} CSS class
                 */
                getStatusClass(status) {
                    if (status && status.startsWith("passed")) return "success"
                    if (status === "flaky") return "warning"
                    if (status === "failed") return "danger"
                    if (status === "skipped") return "info"
                    if (status && status.includes("retry")) return "link"
                    return "dark"
                }

                /**
                 * Handle ESC key press to close modal
                 * @param {KeyboardEvent} event - Keyboard event
                 */
                handleEscKeyPress = (event) => {
                    if (event.key === "Escape") {
                        this.closeHistoryModal()
                    }
                }

                /**
                 * Close history modal
                 */
                closeHistoryModal() {
                    const historyElement = document.getElementById("historyModal")
                    historyElement.classList.remove("is-active")

                    // Remove keyboard event listener
                    document.removeEventListener("keydown", this.handleEscKeyPress)
                }

                /**
                 * Show history error message
                 * @param {string} modalId - Modal ID
                 */
                showHistoryErrorMessage(modalId) {
                    document.getElementById(modalId)?.classList.add("is-active")
                }

                /**
                 * Close error modal
                 * @param {string} modalId - Modal ID
                 */
                closeErrorModal(modalId) {
                    document.getElementById(modalId)?.classList.remove("is-active")
                }
            }
            /**
             * ====================================
             * MOBILE RESPONSIVE MANAGER
             * ====================================
             */
            class MobileManager {
                /**
                 * Initialize the mobile manager
                 */
                constructor() {
                    this.sidebar = document.getElementById('sidebar');
                    this.init();
                }

                /**
                 * Initialize mobile manager
                 */
                init() {
                    // Add sidebar toggle button to navbar for mobile
                    const navbar = document.querySelector('.navbar-brand');
                    if (navbar) {
                        const toggleButton = document.createElement('a');
                        toggleButton.className = 'navbar-item sidebar-toggle is-hidden-desktop';
                        toggleButton.innerHTML = '<i class="fa fa-bars"></i>';
                        toggleButton.addEventListener('click', () => this.toggleSidebar());
                        navbar.appendChild(toggleButton);
                    }

                    // Close sidebar when clicking on a link on mobile
                    const sidebarLinks = document.querySelectorAll('.sidebar-menu-link');
                    sidebarLinks.forEach(link => {
                        link.addEventListener('click', () => {
                            if (window.innerWidth < 769) {
                                this.sidebar.classList.remove('is-active');
                            }
                        });
                    });
                }

                /**
                 * Toggle sidebar on mobile
                 */
                toggleSidebar() {
                    this.sidebar.classList.toggle('is-active');
                }
            }

            /**
             * ====================================
             * INITIALIZATION
             * ====================================
             */
            // Initialize data
            const testData = {{{ json results }}};
            const testHistory = {{{ json testHistories }}};

            // Initialize DOM elements
            const elements = {
                testDetails: document.getElementById('testDetails'),
                summary: document.getElementById('dashboard-section'),
                themeButton: document.getElementById("toggle-theme"),
                themeIcon: document.getElementById("theme-icon"),
                htmlElement: document.documentElement,
                searchInput: document.querySelector('input[name="search"]'),
                detailsElements: document.querySelectorAll('details'),
                filtersDisplay: document.getElementById('selected-filters'),
            };

            // Initialize managers
            const sidebarManager = new SidebarManager();
            const themeManager = new ThemeManager(elements);
            const testDetailsManager = new TestDetailsManager(elements, testData, testHistory, sidebarManager);
            const filterManager = new FilterManager(elements);
            const searchManager = new SearchManager(elements);
            const historyManager = new HistoryManager(testHistory);
            const mobileManager = new MobileManager();
            const sidebarCollapseManager = new SidebarCollapseManager();

            // Attach event listeners
            testDetailsManager.attachEventListeners();

            // Expose necessary functions to the global scope
            window.showSummary = () => testDetailsManager.hide();
            window.openModal = () => document.querySelector("#testImage").classList.add("is-active");
            window.closeModal = () => document.querySelector("#testImage").classList.remove("is-active");
            window.closeErrorModal = (modalId) => document.getElementById(modalId).classList.remove("is-active");
            window.openTraceViewer = (button) => {
                const tracePath = button.getAttribute("data-trace");
                if (tracePath) {
                    const normalizedTracePath = tracePath.replace(/\\/g, '/');
                    const baseUrl = Utils.getAdjustedBaseUrl();
                    window.open(`${baseUrl}/trace/index.html?trace=${baseUrl}/${normalizedTracePath}`, "_blank");
                }
            };
            window.getAdjustedBaseUrl = Utils.getAdjustedBaseUrl;
            window.openHistory = () => {
                historyManager.setCurrentHistory(testDetailsManager.testHistoriesMap, testDetailsManager.testHistoryTitle);
                historyManager.openHistory();
            };
            window.closeHistoryModal = () => historyManager.closeHistoryModal();
            window.showHistoryErrorMessage = (modalId) => historyManager.showHistoryErrorMessage(modalId);
        });
    </script>
</body>
</html>